<?php
require 'conn.php';

session_start();

// Check if this is an AJAX request
if(isset($_GET['ajax']) && $_GET['ajax'] == '1') {
    header('Content-Type: application/json');
    
    if (isset($_SESSION['login']) && $_SESSION['login'] == true) {
        $number = $_SESSION['number'];
        $password = $_SESSION['password'];

        $sqlfetch = "SELECT balance, current_round FROM usersdata WHERE number='$number' AND password='$password'";
        $result = mysqli_query($conn, $sqlfetch);

        if (mysqli_num_rows($result) > 0) {
            $row = mysqli_fetch_assoc($result);
            echo json_encode([
                'balance' => $row['balance'],
                'currentRound' => $row['current_round'] ?? 1
            ]);
        } else {
            echo json_encode(['error' => 'Invalid credentials']);
        }
    } else {
        echo json_encode(['error' => 'Session expired']);
    }
    exit();
}

// Handle POST requests (bets, wins, and round updates)
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    header('Content-Type: application/json');
    
    if (!isset($_SESSION['login'])) {
        echo json_encode(['error' => 'Session expired']);
        exit();
    }

    $number = $_SESSION['number'];
    $password = $_SESSION['password'];
    $action = $_POST['action'];

    // Verify user credentials first
    $sql = "SELECT balance, current_round FROM usersdata WHERE number='$number' AND password='$password'";
    $result = mysqli_query($conn, $sql);
    
    if (mysqli_num_rows($result) == 0) {
        echo json_encode(['error' => 'Invalid credentials']);
        exit();
    }

    $user = mysqli_fetch_assoc($result);
    $balance = $user['balance'];
    $currentRound = $user['current_round'] ?? 1;

    if ($action == 'placeBet') {
        $betAmount = floatval($_POST['betAmount']);
        $color = $_POST['color'];
        
        if ($betAmount <= 0 || $betAmount > $balance) {
            echo json_encode(['success' => false, 'error' => 'Invalid bet amount']);
            exit();
        }
        
        // Deduct from balance
        $newBalance = $balance - $betAmount;
        $updateSql = "UPDATE usersdata SET balance = $newBalance WHERE number='$number' AND password='$password'";
        
        if (mysqli_query($conn, $updateSql)) {
            echo json_encode(['success' => true, 'newBalance' => $newBalance]);
        } else {
            echo json_encode(['success' => false, 'error' => 'Database error']);
        }
    } 
    elseif ($action == 'processWin') {
        $winAmount = floatval($_POST['winAmount']);
        
        // Add to balance
        $newBalance = $balance + $winAmount;
        $updateSql = "UPDATE usersdata SET balance = $newBalance WHERE number='$number' AND password='$password'";
        
        if (mysqli_query($conn, $updateSql)) {
            echo json_encode(['success' => true, 'newBalance' => $newBalance]);
        } else {
            echo json_encode(['success' => false, 'error' => 'Database error']);
        }
    }
    elseif ($action == 'updateRound') {
        $newRound = intval($_POST['newRound']);
        $updateSql = "UPDATE usersdata SET current_round = $newRound";
        
        
        if (mysqli_query($conn, $updateSql)) {
            echo json_encode(['success' => true]);
        } else {
            echo json_encode(['success' => false, 'error' => 'Database error']);
        }
    }
    exit();
}

// Normal page request continues
if (!isset($_SESSION['login']) || $_SESSION['login'] != true) {
    session_destroy();
    header("location: index.php");
    exit();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ColorWin | Color Prediction Game</title>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Google Fonts -->
   
    <!-- Animate.css -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <link rel="stylesheet" href="css/main.css">
</head>
<body>
    <!-- Animated background elements -->
    <div class="bg-bubble bubble1"></div>
    <div class="bg-bubble bubble2"></div>
    <div class="bg-bubble bubble3"></div>

    <!-- Navbar -->
    <nav class="navbar">
        <button class="menu-btn" id="menuBtn">
            <i class="fas fa-bars"></i>
        </button>

        <a href="#" class="logo">
            <span class="logo-icon">ðŸŽ¨</span>
            <span>ColorWin</span>
        </a>

        <div class="wallet-container" id="walletBtn">
            <i class="fas fa-wallet"></i>
            <span id="walletAmount">â‚¹10</span>
        </div>
    </nav>

    <!-- Dropdown Menu -->
    <div class="dropdown-menu" id="dropdownMenu">
        <a href="#" class="menu-item">
            <i class="fas fa-user"></i>
            <span>Profile</span>
        </a>
        <a href="wallet.php" class="menu-item">
            <i class="fas fa-wallet"></i>
            <span>Wallet</span>
        </a>
        <a href="#" class="menu-item">
            <i class="fas fa-history"></i>
            <span>History</span>
        </a>
        <a href="#" class="menu-item">
            <i class="fas fa-trophy"></i>
            <span>Leaderboard</span>
        </a>
        <a href="#" class="menu-item">
            <i class="fas fa-headset"></i>
            <span>Support</span>
        </a>
        <a href="index.php" class="menu-item logout-item">
            <i class="fas fa-sign-out-alt"></i>
            <span>Logout</span>
        </a>
    </div>

    <!-- Result Popup -->
    <div class="result-popup" id="resultPopup">
        <div class="result-icon">
            <i class="fas fa-trophy" id="resultIcon"></i>
        </div>
        <h2 class="result-title" id="resultTitle">You Won!</h2>
        <div class="result-amount" id="resultAmount">+â‚¹500.00</div>
        <div class="result-details" id="resultDetails">
            You bet â‚¹500 on <span class="win-amount">Red</span> and won â‚¹1000!
        </div>
        <button class="result-close" id="resultClose">Continue</button>
    </div>

    <!-- Main Content -->
    <div class="container">
        <div class="header">
            <h1>Color Prediction Game</h1>
            <p class="subtitle">Predict the winning color and win up to 2.4x your bet amount!</p>
        </div>

        <!-- Game Section -->
        <div class="game-section">
            <h2 class="section-title">
                <i class="fas fa-gamepad"></i> Place Your Bet
            </h2>
            
            <!-- Timer Section -->
            <div class="timer-section">
                <div class="timer-display" id="timerDisplay">00:30</div>
                <div class="timer-bar">
                    <div class="timer-progress" id="timerProgress"></div>
                </div>
                <div class="round-info">Round #<span id="roundNumber">1</span></div>
            </div>
            
            <!-- Color Options -->
            <div class="color-options">
                <div class="color-option red" id="redOption" data-color="red">
                    <div class="color-icon">
                        <i class="fas fa-square"></i>
                    </div>
                    <div class="color-name">Red</div>
                    <div class="color-multiplier">2.4x Payout</div>
                </div>
                
                <div class="color-option green" id="greenOption" data-color="green">
                    <div class="color-icon">
                        <i class="fas fa-square"></i>
                    </div>
                    <div class="color-name">Green</div>
                    <div class="color-multiplier">2.4x Payout</div>
                </div>
                
                <div class="color-option violet" id="violetOption" data-color="violet">
                    <div class="color-icon">
                        <i class="fas fa-square"></i>
                    </div>
                    <div class="color-name">Violet</div>
                    <div class="color-multiplier">2.4x Payout</div>
                </div>
            </div>
            
            <!-- Bet Amount -->
            <div class="bet-section">
                <div class="bet-controls">
                    <input type="number" class="bet-amount" id="betAmount" placeholder="Enter bet amount" value="10">
                </div>
                
                <div class="quick-bet">
                    <button class="quick-bet-btn" data-amount="10">+10</button>
                    <button class="quick-bet-btn" data-amount="50">+50</button>
                    <button class="quick-bet-btn" data-amount="100">+100</button>
                    <button class="quick-bet-btn" data-amount="500">+500</button>
                </div>
            </div>
            
            <!-- Action Buttons -->
            <div class="action-buttons">
                <button class="bet-btn place-bet" id="placeBetBtn">
                    <i class="fas fa-coins"></i> Place Bet
                </button>
                <button class="bet-btn clear-bet" id="clearBetBtn">
                    <i class="fas fa-trash"></i> Clear
                </button>
            </div>
        </div>
        
        <!-- Game History -->
        <div class="history-section">
            <div class="history-title">
                <h2 class="section-title">
                    <i class="fas fa-history"></i> Game History
                </h2>
                <div class="round-info">Last 5 rounds</div>
            </div>
            
            <div class="history-items" id="historyItems">
                <!-- History items will be added here dynamically -->
            </div>
            
            <!-- Detailed History -->
            <div class="detailed-history">
                <h3 class="section-title">
                    <i class="fas fa-list"></i> Your Last 5 Bets
                </h3>
                
                <div id="historyTableContainer">
                    <table class="history-table" id="historyTable">
                        <thead>
                            <tr>
                                <th>Round</th>
                                <th>Your Color</th>
                                <th>Amount</th>
                                <th>Result</th>
                                <th>Payout</th>
                            </tr>
                        </thead>
                        <tbody id="historyTableBody">
                            <!-- History rows will be added here dynamically -->
                        </tbody>
                    </table>
                    <div class="no-history" id="noHistoryMessage" style="display: none;">
                        No bets history yet. Place your first bet to see your results here!
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div class="toast" id="toast">
        <i class="fas fa-check-circle"></i>
        <span id="toastMessage">Bet placed successfully!</span>
    </div>

    <script>
     document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const menuBtn = document.getElementById('menuBtn');
    const dropdownMenu = document.getElementById('dropdownMenu');
    const walletBtn = document.getElementById('walletBtn');
    const walletAmount = document.getElementById('walletAmount');
    const timerDisplay = document.getElementById('timerDisplay');
    const timerProgress = document.getElementById('timerProgress');
    const roundNumber = document.getElementById('roundNumber');
    const redOption = document.getElementById('redOption');
    const greenOption = document.getElementById('greenOption');
    const violetOption = document.getElementById('violetOption');
    const betAmount = document.getElementById('betAmount');
    const placeBetBtn = document.getElementById('placeBetBtn');
    const clearBetBtn = document.getElementById('clearBetBtn');
    const historyItems = document.getElementById('historyItems');
    const historyTableBody = document.getElementById('historyTableBody');
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toastMessage');
    const quickBetBtns = document.querySelectorAll('.quick-bet-btn');
    const resultPopup = document.getElementById('resultPopup');
    const resultIcon = document.getElementById('resultIcon');
    const resultTitle = document.getElementById('resultTitle');
    const resultAmount = document.getElementById('resultAmount');
    const resultDetails = document.getElementById('resultDetails');
    const resultClose = document.getElementById('resultClose');
    const noHistoryMessage = document.getElementById('noHistoryMessage');

    // Game state
    let walletBalance = 0;
    let selectedColor = null;
    let currentBet = 0;
    let roundTime = 30;
    let timeLeft = roundTime;
    let roundId = 1; // Will be updated from database
    let isBettingOpen = true;
    let gameInterval;
    let history = [];
    let betHistory = [];
    let hasPlacedBet = false;

    // First fetch the balance and round number from server
    fetchWalletBalanceAndRound();

    function fetchWalletBalanceAndRound() {
        const xhr = new XMLHttpRequest();
        xhr.open("GET", "main.php?ajax=1", true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.onload = function() {
            if(xhr.status === 200) {
                try {
                    const response = JSON.parse(xhr.responseText);
                    if(response.balance !== undefined) {
                        walletBalance = parseFloat(response.balance);
                        roundId = parseInt(response.currentRound) || 1;
                        console.log("Balance fetched:", walletBalance, "Round:", roundId);
                        roundNumber.textContent = roundId;
                        updateWalletDisplay();
                        initGame();
                    } else if(response.error) {
                        console.error("Error:", response.error);
                        if(response.error === 'Session expired') {
                            window.location.href = 'index.php';
                        }
                    }
                } catch(e) {
                    console.error("JSON parse error:", e);
                }
            } else {
                console.error("Request failed with status:", xhr.status);
            }
        };
        xhr.onerror = function() {
            console.error("Request failed");
        };
        xhr.send();
    }

    // Update round number in database
    function updateRoundNumber(newRound) {
        const formData = new FormData();
        formData.append('newRound', newRound);
        formData.append('action', 'updateRound');
        
        fetch('main.php', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if(!data.success) {
                console.error("Failed to update round number");
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }

    // Initialize game
    function initGame() {
        updateHistoryDisplay();
        updateBetHistoryDisplay();
        startGameTimer();
    }

    // Update wallet display
    function updateWalletDisplay() {
        walletAmount.textContent = `â‚¹${walletBalance.toFixed(2)}`;
    }

    // Start game timer
    function startGameTimer() {
        clearInterval(gameInterval);
        timeLeft = roundTime;
        updateTimerDisplay();
        
        gameInterval = setInterval(() => {
            timeLeft--;
            updateTimerDisplay();
            
            if (timeLeft <= 0) {
                clearInterval(gameInterval);
                endRound();
                startGameTimer();
            }
        }, 1000);
    }

    // Update timer display
    function updateTimerDisplay() {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        const progressPercent = (timeLeft / roundTime) * 100;
        timerProgress.style.width = `${progressPercent}%`;
        
        if (timeLeft <= 5) {
            timerDisplay.style.color = 'var(--danger)';
            timerProgress.style.background = 'var(--danger)';
            
            if (timeLeft <= 3) {
                timerDisplay.style.animation = 'shake 0.5s infinite';
            }
        } else {
            timerDisplay.style.color = 'var(--gold)';
            timerProgress.style.background = 'linear-gradient(90deg, var(--primary), var(--accent))';
            timerDisplay.style.animation = '';
        }
        
        if (timeLeft <= 3) {
            isBettingOpen = false;
            placeBetBtn.disabled = true;
        } else {
            isBettingOpen = true;
            placeBetBtn.disabled = false;
        }
    }

    // End round and determine winner
    function endRound() {
        hasPlacedBet = false;
        const colors = ['red', 'green', 'violet'];
        const winningColor = colors[Math.floor(Math.random() * colors.length)];
        
        history.unshift(winningColor);
        if (history.length > 5) {
            history.pop();
        }
        updateHistoryDisplay();
        
        if (selectedColor === winningColor) {
            const winAmount = currentBet * 2.4;
            walletBalance += winAmount;
            updateWalletDisplay();
            
            betHistory.unshift({
                round: roundId,
                color: selectedColor,
                amount: currentBet,
                result: 'win',
                payout: winAmount
            });
            
            showResultPopup(true, winAmount, selectedColor, currentBet);
            createConfetti();
            
            // Send win to server
            sendWinToServer(winAmount);
        } else if (selectedColor) {
            betHistory.unshift({
                round: roundId,
                color: selectedColor,
                amount: currentBet,
                result: 'lose',
                payout: 0
            });
            
            showResultPopup(false, 0, selectedColor, currentBet);
        }
        
        updateBetHistoryDisplay();
        selectedColor = null;
        currentBet = 0;
        resetColorSelection();
        
        // Increment round and update database
        roundId++;
        roundNumber.textContent = roundId;
        updateRoundNumber(roundId);
        
        placeBetBtn.disabled = false;
        placeBetBtn.style.opacity = '1';
        placeBetBtn.style.cursor = 'pointer';
        betAmount.value = '';
    }

    // Send win to server
    function sendWinToServer(amount) {
        const formData = new FormData();
        formData.append('winAmount', amount);
        formData.append('action', 'processWin');
        
        fetch('main.php', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if(data.success && data.newBalance !== undefined) {
                walletBalance = parseFloat(data.newBalance);
                updateWalletDisplay();
            } else if(data.error === 'Session expired') {
                window.location.href = 'index.php';
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }

    // Create confetti effect
    function createConfetti() {
        const colors = ['#ff4757', '#00b894', '#6c5ce7', '#FFD700', '#fd79a8', '#00cec9'];
        
        for (let i = 0; i < 100; i++) {
            const confetti = document.createElement('div');
            confetti.className = 'confetti';
            confetti.style.left = `${Math.random() * 100}vw`;
            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.width = `${Math.random() * 10 + 5}px`;
            confetti.style.height = `${Math.random() * 10 + 5}px`;
            confetti.style.animationDelay = `${Math.random() * 2}s`;
            confetti.style.opacity = Math.random() + 0.5;
            
            document.body.appendChild(confetti);
            
            setTimeout(() => {
                confetti.remove();
            }, 3000);
        }
    }

    // Show result popup
    function showResultPopup(isWin, amount, color, betAmount) {
        resultPopup.className = 'result-popup';
        resultPopup.classList.add(isWin ? 'win' : 'lose');
        
        if (isWin) {
            resultIcon.className = 'fas fa-trophy';
            resultTitle.textContent = 'You Won!';
            resultAmount.textContent = `+â‚¹${amount.toFixed(2)}`;
            resultDetails.innerHTML = `You bet â‚¹${betAmount.toFixed(2)} on <span class="win-amount">${color.charAt(0).toUpperCase() + color.slice(1)}</span> and won â‚¹${amount.toFixed(2)}!`;
        } else {
            resultIcon.className = 'fas fa-times-circle';
            resultTitle.textContent = 'You Lost';
            resultAmount.textContent = `-â‚¹${betAmount.toFixed(2)}`;
            resultDetails.innerHTML = `You bet â‚¹${betAmount.toFixed(2)} on <span class="loss-amount">${color.charAt(0).toUpperCase() + color.slice(1)}</span> and lost.`;
        }
        
        resultPopup.classList.add('show');
    }

    // Update history display
    function updateHistoryDisplay() {
        historyItems.innerHTML = '';
        
        if (history.length === 0) {
            historyItems.textContent = 'No history yet';
            historyItems.classList.add('empty');
            return;
        }
        
        historyItems.classList.remove('empty');
        
        const lastFive = history.slice(0, 5);
        lastFive.forEach(color => {
            const historyItem = document.createElement('div');
            historyItem.className = `history-item ${color}`;
            historyItem.textContent = color.charAt(0).toUpperCase();
            historyItems.appendChild(historyItem);
        });
    }

    // Update bet history display
    function updateBetHistoryDisplay() {
        historyTableBody.innerHTML = '';
        
        if (betHistory.length === 0) {
            document.getElementById('historyTable').style.display = 'none';
            noHistoryMessage.style.display = 'block';
            return;
        }
        
        document.getElementById('historyTable').style.display = 'table';
        noHistoryMessage.style.display = 'none';
        
        const lastFiveBets = betHistory.slice(0, 5);
        
        lastFiveBets.forEach(bet => {
            const row = document.createElement('tr');
            
            const roundCell = document.createElement('td');
            roundCell.textContent = bet.round;
            row.appendChild(roundCell);
            
            const colorCell = document.createElement('td');
            colorCell.textContent = bet.color.charAt(0).toUpperCase() + bet.color.slice(1);
            colorCell.style.color = `var(--${bet.color})`;
            row.appendChild(colorCell);
            
            const amountCell = document.createElement('td');
            amountCell.textContent = `â‚¹${bet.amount.toFixed(2)}`;
            row.appendChild(amountCell);
            
            const resultCell = document.createElement('td');
            const resultSpan = document.createElement('span');
            resultSpan.textContent = bet.result === 'win' ? 'Win' : 'Lose';
            resultSpan.className = bet.result === 'win' ? 'win-amount' : 'loss-amount';
            resultCell.appendChild(resultSpan);
            row.appendChild(resultCell);
            
            const payoutCell = document.createElement('td');
            if (bet.result === 'win') {
                payoutCell.innerHTML = `<span class="win-amount">+â‚¹${bet.payout.toFixed(2)}</span>`;
            } else {
                payoutCell.innerHTML = `<span class="loss-amount">-â‚¹${bet.amount.toFixed(2)}</span>`;
            }
            row.appendChild(payoutCell);
            
            historyTableBody.appendChild(row);
        });
    }

    // Reset color selection
    function resetColorSelection() {
        redOption.classList.remove('selected');
        greenOption.classList.remove('selected');
        violetOption.classList.remove('selected');
    }

    // Show toast notification
    function showToast(message, type = 'success') {
        toastMessage.textContent = message;
        toast.className = 'toast';
        toast.classList.add(type === 'error' ? 'error' : 'success');
        toast.classList.add('show');
        
        setTimeout(() => {
            toast.classList.remove('show');
        }, 3000);
    }

    // Send bet to server
    function sendBetToServer(amount, color) {
        const formData = new FormData();
        formData.append('betAmount', amount);
        formData.append('color', color);
        formData.append('action', 'placeBet');
        
        fetch('main.php', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if(data.success) {
                console.log("Bet recorded successfully");
                if(data.newBalance !== undefined) {
                    walletBalance = parseFloat(data.newBalance);
                    updateWalletDisplay();
                }
            } else {
                // If server rejects the bet, revert the deduction
                walletBalance += amount;
                updateWalletDisplay();
                showToast(data.error || "Bet failed", 'error');
                hasPlacedBet = false;
                placeBetBtn.disabled = false;
                placeBetBtn.style.opacity = '1';
                placeBetBtn.style.cursor = 'pointer';
                
                if(data.error === 'Session expired') {
                    window.location.href = 'index.php';
                }
            }
        })
        .catch(error => {
            console.error('Error:', error);
            walletBalance += amount;
            updateWalletDisplay();
            showToast("Network error", 'error');
            hasPlacedBet = false;
            placeBetBtn.disabled = false;
            placeBetBtn.style.opacity = '1';
            placeBetBtn.style.cursor = 'pointer';
        });
    }

    // Event Listeners
    menuBtn.addEventListener('click', (event) => {
        event.stopPropagation();
        dropdownMenu.classList.toggle('active');
        
        if (dropdownMenu.classList.contains('active')) {
            menuBtn.innerHTML = '<i class="fas fa-times"></i>';
            menuBtn.style.transform = 'scale(1.1) rotate(90deg)';
        } else {
            menuBtn.innerHTML = '<i class="fas fa-bars"></i>';
            menuBtn.style.transform = 'scale(1.1) rotate(0)';
        }
        
        setTimeout(() => {
            menuBtn.style.transform = dropdownMenu.classList.contains('active') 
                ? 'scale(1) rotate(90deg)' 
                : 'scale(1) rotate(0)';
        }, 200);
    });

    document.addEventListener('click', (event) => {
        if (!menuBtn.contains(event.target) && !dropdownMenu.contains(event.target)) {
            dropdownMenu.classList.remove('active');
            menuBtn.innerHTML = '<i class="fas fa-bars"></i>';
            menuBtn.style.transform = 'scale(1) rotate(0)';
        }
    });

    walletBtn.addEventListener('click', () => {
        walletBtn.style.animation = 'bounce 0.5s ease';
        setTimeout(() => {
            walletBtn.style.animation = '';
        }, 500);
    });

    redOption.addEventListener('click', () => {
        if (!isBettingOpen || hasPlacedBet) return;
        resetColorSelection();
        redOption.classList.add('selected');
        selectedColor = 'red';
    });

    greenOption.addEventListener('click', () => {
        if (!isBettingOpen || hasPlacedBet) return;
        resetColorSelection();
        greenOption.classList.add('selected');
        selectedColor = 'green';
    });

    violetOption.addEventListener('click', () => {
        if (!isBettingOpen || hasPlacedBet) return;
        resetColorSelection();
        violetOption.classList.add('selected');
        selectedColor = 'violet';
    });

    quickBetBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const amount = parseFloat(this.getAttribute('data-amount'));
            const current = parseFloat(betAmount.value) || 0;
            betAmount.value = current + amount;
        });
    });

    placeBetBtn.addEventListener('click', () => {
        const amount = parseFloat(betAmount.value);
        
        if (!amount || amount <= 0) {
            showToast('Please enter a valid bet amount', 'error');
            return;
        }
        
        if (amount > walletBalance) {
            showToast('Insufficient balance', 'error');
            return;
        }
        
        if (!selectedColor) {
            showToast('Please select a color', 'error');
            return;
        }
        
        if (hasPlacedBet) {
            showToast('You can only place one bet per round', 'error');
            return;
        }
        
        currentBet = amount;
        walletBalance -= amount;
        updateWalletDisplay();
        showToast(`Bet placed: â‚¹${amount.toFixed(2)} on ${selectedColor}`, 'success');
        hasPlacedBet = true;
        
        // Send bet to server
        sendBetToServer(amount, selectedColor);
        
        placeBetBtn.disabled = true;
        placeBetBtn.style.opacity = '0.7';
        placeBetBtn.style.cursor = 'not-allowed';
    });

    clearBetBtn.addEventListener('click', () => {
        if (!hasPlacedBet) {
            resetColorSelection();
            betAmount.value = '';
            selectedColor = null;
            currentBet = 0;
        } else {
            showToast('Cannot clear bet after placing for this round', 'error');
        }
    });

    resultClose.addEventListener('click', () => {
        resultPopup.classList.remove('show');
    });
});
</script>
</body>
</html>


/////////////////////////////////////////////////////////////////////////////////////////////////////

<?php
require 'conn.php';

session_start();

// Check if this is an AJAX request
if(isset($_GET['ajax'])) {
    header('Content-Type: application/json');
    
    if ($_GET['ajax'] == 'getTimer') {
        // Get current timer value for all users
        $sql = "SELECT timmer FROM usersdata LIMIT 1";
        $result = mysqli_query($conn, $sql);
        $row = mysqli_fetch_assoc($result);
        
        echo json_encode([
            'timer' => $row['timmer'] ?? 30,
            'serverTime' => time() // Current server timestamp
        ]);
        exit();
    }
    
    if (isset($_SESSION['login']) && $_SESSION['login'] == true) {
        $number = $_SESSION['number'];
        $password = $_SESSION['password'];

        if ($_GET['ajax'] == 'getUserData') {
            $sqlfetch = "SELECT balance, current_round FROM usersdata WHERE number='$number' AND password='$password'";
            $result = mysqli_query($conn, $sqlfetch);

            if (mysqli_num_rows($result) > 0) {
                $row = mysqli_fetch_assoc($result);
                echo json_encode([
                    'balance' => $row['balance'],
                    'currentRound' => $row['current_round'] ?? 1
                ]);
            } else {
                echo json_encode(['error' => 'Invalid credentials']);
            }
            exit();
        }
    } else {
        echo json_encode(['error' => 'Session expired']);
        exit();
    }
}

// Handle POST requests
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    header('Content-Type: application/json');
    
    if (!isset($_SESSION['login'])) {
        echo json_encode(['error' => 'Session expired']);
        exit();
    }

    $number = $_SESSION['number'];
    $password = $_SESSION['password'];
    $action = $_POST['action'];

    // Verify user credentials first
    $sql = "SELECT balance FROM usersdata WHERE number='$number' AND password='$password'";
    $result = mysqli_query($conn, $sql);
    
    if (mysqli_num_rows($result) == 0) {
        echo json_encode(['error' => 'Invalid credentials']);
        exit();
    }

    $user = mysqli_fetch_assoc($result);
    $balance = $user['balance'];

    if ($action == 'placeBet') {
        $betAmount = floatval($_POST['betAmount']);
        $color = $_POST['color'];
        
        if ($betAmount <= 0 || $betAmount > $balance) {
            echo json_encode(['success' => false, 'error' => 'Invalid bet amount']);
            exit();
        }
        
        $newBalance = $balance - $betAmount;
        $updateSql = "UPDATE usersdata SET balance = $newBalance WHERE number='$number' AND password='$password'";
        
        if (mysqli_query($conn, $updateSql)) {
            echo json_encode(['success' => true, 'newBalance' => $newBalance]);
        } else {
            echo json_encode(['success' => false, 'error' => 'Database error']);
        }
    } 
    elseif ($action == 'processWin') {
        $winAmount = floatval($_POST['winAmount']);
        
        $newBalance = $balance + $winAmount;
        $updateSql = "UPDATE usersdata SET balance = $newBalance WHERE number='$number' AND password='$password'";
        
        if (mysqli_query($conn, $updateSql)) {
            echo json_encode(['success' => true, 'newBalance' => $newBalance]);
        } else {
            echo json_encode(['success' => false, 'error' => 'Database error']);
        }
    }
    elseif ($action == 'updateRound') {
        $newRound = intval($_POST['newRound']);
        $updateSql = "UPDATE usersdata SET current_round = $newRound";
        
        if (mysqli_query($conn, $updateSql)) {
            echo json_encode(['success' => true]);
        } else {
            echo json_encode(['success' => false, 'error' => 'Database error']);
        }
    }
    elseif ($action == 'updateTimer') {
        $newTime = intval($_POST['newTime']);
        $updateSql = "UPDATE usersdata SET timmer = $newTime";
        
        if (mysqli_query($conn, $updateSql)) {
            echo json_encode(['success' => true]);
        } else {
            echo json_encode(['success' => false, 'error' => 'Database error']);
        }
    }
    elseif ($action == 'resetTimer') {
        $roundTime = 30; // Default round time
        $updateSql = "UPDATE usersdata SET timmer = $roundTime";
        
        if (mysqli_query($conn, $updateSql)) {
            echo json_encode(['success' => true]);
        } else {
            echo json_encode(['success' => false, 'error' => 'Database error']);
        }
    }
    exit();
}

// Normal page request continues
if (!isset($_SESSION['login']) || $_SESSION['login'] != true) {
    session_destroy();
    header("location: index.php");
    exit();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ColorWin | Color Prediction Game</title>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Google Fonts -->
   
    <!-- Animate.css -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <link rel="stylesheet" href="css/main.css">
</head>
<body>
    <!-- Animated background elements -->
    <div class="bg-bubble bubble1"></div>
    <div class="bg-bubble bubble2"></div>
    <div class="bg-bubble bubble3"></div>

    <!-- Navbar -->
    <nav class="navbar">
        <button class="menu-btn" id="menuBtn">
            <i class="fas fa-bars"></i>
        </button>

        <a href="#" class="logo">
            <span class="logo-icon">ðŸŽ¨</span>
            <span>ColorWin</span>
        </a>

        <div class="wallet-container" id="walletBtn">
            <i class="fas fa-wallet"></i>
            <span id="walletAmount">â‚¹10</span>
        </div>
    </nav>

    <!-- Dropdown Menu -->
    <div class="dropdown-menu" id="dropdownMenu">
        <a href="#" class="menu-item">
            <i class="fas fa-user"></i>
            <span>Profile</span>
        </a>
        <a href="wallet.php" class="menu-item">
            <i class="fas fa-wallet"></i>
            <span>Wallet</span>
        </a>
        <a href="#" class="menu-item">
            <i class="fas fa-history"></i>
            <span>History</span>
        </a>
        <a href="#" class="menu-item">
            <i class="fas fa-trophy"></i>
            <span>Leaderboard</span>
        </a>
        <a href="#" class="menu-item">
            <i class="fas fa-headset"></i>
            <span>Support</span>
        </a>
        <a href="index.php" class="menu-item logout-item">
            <i class="fas fa-sign-out-alt"></i>
            <span>Logout</span>
        </a>
    </div>

    <!-- Result Popup -->
    <div class="result-popup" id="resultPopup">
        <div class="result-icon">
            <i class="fas fa-trophy" id="resultIcon"></i>
        </div>
        <h2 class="result-title" id="resultTitle">You Won!</h2>
        <div class="result-amount" id="resultAmount">+â‚¹500.00</div>
        <div class="result-details" id="resultDetails">
            You bet â‚¹500 on <span class="win-amount">Red</span> and won â‚¹1000!
        </div>
        <button class="result-close" id="resultClose">Continue</button>
    </div>

    <!-- Main Content -->
    <div class="container">
        <div class="header">
            <h1>Color Prediction Game</h1>
            <p class="subtitle">Predict the winning color and win up to 2.4x your bet amount!</p>
        </div>

        <!-- Game Section -->
        <div class="game-section">
            <h2 class="section-title">
                <i class="fas fa-gamepad"></i> Place Your Bet
            </h2>
            
            <!-- Timer Section -->
            <div class="timer-section">
                <div class="timer-display" id="timerDisplay">00:30</div>
                <div class="timer-bar">
                    <div class="timer-progress" id="timerProgress"></div>
                </div>
                <div class="round-info">Round #<span id="roundNumber">1</span></div>
            </div>
            
            <!-- Color Options -->
            <div class="color-options">
                <div class="color-option red" id="redOption" data-color="red">
                    <div class="color-icon">
                        <i class="fas fa-square"></i>
                    </div>
                    <div class="color-name">Red</div>
                    <div class="color-multiplier">2.4x Payout</div>
                </div>
                
                <div class="color-option green" id="greenOption" data-color="green">
                    <div class="color-icon">
                        <i class="fas fa-square"></i>
                    </div>
                    <div class="color-name">Green</div>
                    <div class="color-multiplier">2.4x Payout</div>
                </div>
                
                <div class="color-option violet" id="violetOption" data-color="violet">
                    <div class="color-icon">
                        <i class="fas fa-square"></i>
                    </div>
                    <div class="color-name">Violet</div>
                    <div class="color-multiplier">2.4x Payout</div>
                </div>
            </div>
            
            <!-- Bet Amount -->
            <div class="bet-section">
                <div class="bet-controls">
                    <input type="number" class="bet-amount" id="betAmount" placeholder="Enter bet amount" value="10">
                </div>
                
                <div class="quick-bet">
                    <button class="quick-bet-btn" data-amount="10">+10</button>
                    <button class="quick-bet-btn" data-amount="50">+50</button>
                    <button class="quick-bet-btn" data-amount="100">+100</button>
                    <button class="quick-bet-btn" data-amount="500">+500</button>
                </div>
            </div>
            
            <!-- Action Buttons -->
            <div class="action-buttons">
                <button class="bet-btn place-bet" id="placeBetBtn">
                    <i class="fas fa-coins"></i> Place Bet
                </button>
                <button class="bet-btn clear-bet" id="clearBetBtn">
                    <i class="fas fa-trash"></i> Clear
                </button>
            </div>
        </div>
        
        <!-- Game History -->
        <div class="history-section">
            <div class="history-title">
                <h2 class="section-title">
                    <i class="fas fa-history"></i> Game History
                </h2>
                <div class="round-info">Last 5 rounds</div>
            </div>
            
            <div class="history-items" id="historyItems">
                <!-- History items will be added here dynamically -->
            </div>
            
            <!-- Detailed History -->
            <div class="detailed-history">
                <h3 class="section-title">
                    <i class="fas fa-list"></i> Your Last 5 Bets
                </h3>
                
                <div id="historyTableContainer">
                    <table class="history-table" id="historyTable">
                        <thead>
                            <tr>
                                <th>Round</th>
                                <th>Your Color</th>
                                <th>Amount</th>
                                <th>Result</th>
                                <th>Payout</th>
                            </tr>
                        </thead>
                        <tbody id="historyTableBody">
                            <!-- History rows will be added here dynamically -->
                        </tbody>
                    </table>
                    <div class="no-history" id="noHistoryMessage" style="display: none;">
                        No bets history yet. Place your first bet to see your results here!
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div class="toast" id="toast">
        <i class="fas fa-check-circle"></i>
        <span id="toastMessage">Bet placed successfully!</span>
    </div>

    <script>
   document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const menuBtn = document.getElementById('menuBtn');
    const dropdownMenu = document.getElementById('dropdownMenu');
    const walletBtn = document.getElementById('walletBtn');
    const walletAmount = document.getElementById('walletAmount');
    const timerDisplay = document.getElementById('timerDisplay');
    const timerProgress = document.getElementById('timerProgress');
    const roundNumber = document.getElementById('roundNumber');
    const redOption = document.getElementById('redOption');
    const greenOption = document.getElementById('greenOption');
    const violetOption = document.getElementById('violetOption');
    const betAmount = document.getElementById('betAmount');
    const placeBetBtn = document.getElementById('placeBetBtn');
    const clearBetBtn = document.getElementById('clearBetBtn');
    const historyItems = document.getElementById('historyItems');
    const historyTableBody = document.getElementById('historyTableBody');
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toastMessage');
    const quickBetBtns = document.querySelectorAll('.quick-bet-btn');
    const resultPopup = document.getElementById('resultPopup');
    const resultIcon = document.getElementById('resultIcon');
    const resultTitle = document.getElementById('resultTitle');
    const resultAmount = document.getElementById('resultAmount');
    const resultDetails = document.getElementById('resultDetails');
    const resultClose = document.getElementById('resultClose');
    const noHistoryMessage = document.getElementById('noHistoryMessage');

    // Game state
    let walletBalance = 0;
    let selectedColor = null;
    let currentBet = 0;
    const roundTime = 30; // Fixed round duration in seconds
    let timeLeft = roundTime;
    let roundId = 1;
    let isBettingOpen = true;
    let gameInterval;
    let history = [];
    let betHistory = [];
    let hasPlacedBet = false;
    let serverTimeOffset = 0; // Difference between server and client time
    let lastTimerValue = 0;

    // Initialize game
    initGame();

    function initGame() {
        // First sync with server time and get initial timer value
        syncServerTime().then(() => {
            // Then load user data
            fetchUserData();
            
            // Start the game timer loop
            startGameTimer();
            
            // Initialize displays
            updateHistoryDisplay();
            updateBetHistoryDisplay();
        });
    }

    // Synchronize with server time and get initial timer value
    function syncServerTime() {
        return fetch('main.php?ajax=getTimer')
            .then(response => response.json())
            .then(data => {
                if (data.timer !== undefined) {
                    // Calculate server-client time offset
                    const clientTime = Math.floor(Date.now() / 1000);
                    serverTimeOffset = data.serverTime - clientTime;
                    
                    // Set initial timer value
                    const serverTime = getServerTime();
                    timeLeft = roundTime - (serverTime % roundTime);
                    lastTimerValue = timeLeft;
                    
                    console.log("Timer synced with server. Initial time left:", timeLeft);
                } else if (data.error) {
                    console.error("Error:", data.error);
                    if (data.error === 'Session expired') {
                        window.location.href = 'index.php';
                    }
                }
            })
            .catch(error => {
                console.error("Failed to sync with server:", error);
            });
    }

    // Get current server time
    function getServerTime() {
        return Math.floor(Date.now() / 1000) + serverTimeOffset;
    }

    // Fetch user data (balance, current round)
    function fetchUserData() {
        fetch('main.php?ajax=getUserData')
            .then(response => response.json())
            .then(data => {
                if (data.balance !== undefined) {
                    walletBalance = parseFloat(data.balance);
                    roundId = parseInt(data.currentRound) || 1;
                    roundNumber.textContent = roundId;
                    updateWalletDisplay();
                } else if (data.error) {
                    console.error("Error:", data.error);
                    if (data.error === 'Session expired') {
                        window.location.href = 'index.php';
                    }
                }
            })
            .catch(error => {
                console.error("Failed to fetch user data:", error);
            });
    }

    // Start the game timer
    function startGameTimer() {
        clearInterval(gameInterval);
        
        gameInterval = setInterval(() => {
            const serverTime = getServerTime();
            timeLeft = roundTime - (serverTime % roundTime);
            
            // Detect when round changes (when timer wraps around)
            if (lastTimerValue > 1 && timeLeft === roundTime) {
                endRound();
            }
            
            lastTimerValue = timeLeft;
            updateTimerDisplay();
            
            // Update betting availability
            if (timeLeft <= 3) {
                isBettingOpen = false;
                placeBetBtn.disabled = true;
            } else {
                isBettingOpen = true;
                placeBetBtn.disabled = false;
            }
        }, 200); // Update frequently for smooth display
    }

    // Update timer display
    function updateTimerDisplay() {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        const progressPercent = (timeLeft / roundTime) * 100;
        timerProgress.style.width = `${progressPercent}%`;
        
        if (timeLeft <= 5) {
            timerDisplay.style.color = 'var(--danger)';
            timerProgress.style.background = 'var(--danger)';
            
            if (timeLeft <= 3) {
                timerDisplay.style.animation = 'shake 0.5s infinite';
            }
        } else {
            timerDisplay.style.color = 'var(--gold)';
            timerProgress.style.background = 'linear-gradient(90deg, var(--primary), var(--accent))';
            timerDisplay.style.animation = '';
        }
    }

    // End the current round and start new one
    function endRound() {
        hasPlacedBet = false;
        const colors = ['red', 'green', 'violet'];
        const winningColor = colors[Math.floor(Math.random() * colors.length)];
        
        // Update history
        history.unshift(winningColor);
        if (history.length > 5) history.pop();
        updateHistoryDisplay();
        
        // Process results if bet was placed
        if (selectedColor) {
            if (selectedColor === winningColor) {
                const winAmount = currentBet * 2.4;
                walletBalance += winAmount;
                updateWalletDisplay();
                
                betHistory.unshift({
                    round: roundId,
                    color: selectedColor,
                    amount: currentBet,
                    result: 'win',
                    payout: winAmount
                });
                
                showResultPopup(true, winAmount, selectedColor, currentBet);
                createConfetti();
                sendWinToServer(winAmount);
            } else {
                betHistory.unshift({
                    round: roundId,
                    color: selectedColor,
                    amount: currentBet,
                    result: 'lose',
                    payout: 0
                });
                
                showResultPopup(false, 0, selectedColor, currentBet);
            }
            
            updateBetHistoryDisplay();
        }
        
        // Reset for new round
        selectedColor = null;
        currentBet = 0;
        resetColorSelection();
        
        // Increment round
        roundId++;
        roundNumber.textContent = roundId;
        updateRoundNumber(roundId);
        
        // Reset UI
        placeBetBtn.disabled = false;
        placeBetBtn.style.opacity = '1';
        placeBetBtn.style.cursor = 'pointer';
        betAmount.value = '';
    }

    // Update wallet display
    function updateWalletDisplay() {
        walletAmount.textContent = `â‚¹${walletBalance.toFixed(2)}`;
    }

    // Update history display
    function updateHistoryDisplay() {
        historyItems.innerHTML = '';
        
        if (history.length === 0) {
            historyItems.textContent = 'No history yet';
            historyItems.classList.add('empty');
            return;
        }
        
        historyItems.classList.remove('empty');
        
        history.slice(0, 5).forEach(color => {
            const historyItem = document.createElement('div');
            historyItem.className = `history-item ${color}`;
            historyItem.textContent = color.charAt(0).toUpperCase();
            historyItems.appendChild(historyItem);
        });
    }

    // Update bet history display
    function updateBetHistoryDisplay() {
        historyTableBody.innerHTML = '';
        
        if (betHistory.length === 0) {
            document.getElementById('historyTable').style.display = 'none';
            noHistoryMessage.style.display = 'block';
            return;
        }
        
        document.getElementById('historyTable').style.display = 'table';
        noHistoryMessage.style.display = 'none';
        
        betHistory.slice(0, 5).forEach(bet => {
            const row = document.createElement('tr');
            
            const roundCell = document.createElement('td');
            roundCell.textContent = bet.round;
            row.appendChild(roundCell);
            
            const colorCell = document.createElement('td');
            colorCell.textContent = bet.color.charAt(0).toUpperCase() + bet.color.slice(1);
            colorCell.style.color = `var(--${bet.color})`;
            row.appendChild(colorCell);
            
            const amountCell = document.createElement('td');
            amountCell.textContent = `â‚¹${bet.amount.toFixed(2)}`;
            row.appendChild(amountCell);
            
            const resultCell = document.createElement('td');
            const resultSpan = document.createElement('span');
            resultSpan.textContent = bet.result === 'win' ? 'Win' : 'Lose';
            resultSpan.className = bet.result === 'win' ? 'win-amount' : 'loss-amount';
            resultCell.appendChild(resultSpan);
            row.appendChild(resultCell);
            
            const payoutCell = document.createElement('td');
            if (bet.result === 'win') {
                payoutCell.innerHTML = `<span class="win-amount">+â‚¹${bet.payout.toFixed(2)}</span>`;
            } else {
                payoutCell.innerHTML = `<span class="loss-amount">-â‚¹${bet.amount.toFixed(2)}</span>`;
            }
            row.appendChild(payoutCell);
            
            historyTableBody.appendChild(row);
        });
    }

    // Reset color selection
    function resetColorSelection() {
        redOption.classList.remove('selected');
        greenOption.classList.remove('selected');
        violetOption.classList.remove('selected');
    }

    // Show toast notification
    function showToast(message, type = 'success') {
        toastMessage.textContent = message;
        toast.className = 'toast';
        toast.classList.add(type === 'error' ? 'error' : 'success');
        toast.classList.add('show');
        
        setTimeout(() => {
            toast.classList.remove('show');
        }, 3000);
    }

    // Create confetti effect
    function createConfetti() {
        const colors = ['#ff4757', '#00b894', '#6c5ce7', '#FFD700', '#fd79a8', '#00cec9'];
        
        for (let i = 0; i < 100; i++) {
            const confetti = document.createElement('div');
            confetti.className = 'confetti';
            confetti.style.left = `${Math.random() * 100}vw`;
            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.width = `${Math.random() * 10 + 5}px`;
            confetti.style.height = `${Math.random() * 10 + 5}px`;
            confetti.style.animationDelay = `${Math.random() * 2}s`;
            confetti.style.opacity = Math.random() + 0.5;
            
            document.body.appendChild(confetti);
            
            setTimeout(() => {
                confetti.remove();
            }, 3000);
        }
    }

    // Show result popup
    function showResultPopup(isWin, amount, color, betAmount) {
        resultPopup.className = 'result-popup';
        resultPopup.classList.add(isWin ? 'win' : 'lose');
        
        if (isWin) {
            resultIcon.className = 'fas fa-trophy';
            resultTitle.textContent = 'You Won!';
            resultAmount.textContent = `+â‚¹${amount.toFixed(2)}`;
            resultDetails.innerHTML = `You bet â‚¹${betAmount.toFixed(2)} on <span class="win-amount">${color.charAt(0).toUpperCase() + color.slice(1)}</span> and won â‚¹${amount.toFixed(2)}!`;
        } else {
            resultIcon.className = 'fas fa-times-circle';
            resultTitle.textContent = 'You Lost';
            resultAmount.textContent = `-â‚¹${betAmount.toFixed(2)}`;
            resultDetails.innerHTML = `You bet â‚¹${betAmount.toFixed(2)} on <span class="loss-amount">${color.charAt(0).toUpperCase() + color.slice(1)}</span> and lost.`;
        }
        
        resultPopup.classList.add('show');
    }

    // Send win to server
    function sendWinToServer(amount) {
        const formData = new FormData();
        formData.append('winAmount', amount);
        formData.append('action', 'processWin');
        
        fetch('main.php', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if(data.success && data.newBalance !== undefined) {
                walletBalance = parseFloat(data.newBalance);
                updateWalletDisplay();
            } else if(data.error === 'Session expired') {
                window.location.href = 'index.php';
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }

    // Update round number in database
    function updateRoundNumber(newRound) {
        const formData = new FormData();
        formData.append('newRound', newRound);
        formData.append('action', 'updateRound');
        
        fetch('main.php', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if(!data.success) {
                console.error("Failed to update round number");
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }

    // Send bet to server
    function sendBetToServer(amount, color) {
        const formData = new FormData();
        formData.append('betAmount', amount);
        formData.append('color', color);
        formData.append('action', 'placeBet');
        
        fetch('main.php', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if(data.success) {
                if(data.newBalance !== undefined) {
                    walletBalance = parseFloat(data.newBalance);
                    updateWalletDisplay();
                }
            } else {
                walletBalance += amount;
                updateWalletDisplay();
                showToast(data.error || "Bet failed", 'error');
                hasPlacedBet = false;
                placeBetBtn.disabled = false;
                placeBetBtn.style.opacity = '1';
                placeBetBtn.style.cursor = 'pointer';
                
                if(data.error === 'Session expired') {
                    window.location.href = 'index.php';
                }
            }
        })
        .catch(error => {
            console.error('Error:', error);
            walletBalance += amount;
            updateWalletDisplay();
            showToast("Network error", 'error');
            hasPlacedBet = false;
            placeBetBtn.disabled = false;
            placeBetBtn.style.opacity = '1';
            placeBetBtn.style.cursor = 'pointer';
        });
    }

    // Event Listeners
    menuBtn.addEventListener('click', (event) => {
        event.stopPropagation();
        dropdownMenu.classList.toggle('active');
        
        if (dropdownMenu.classList.contains('active')) {
            menuBtn.innerHTML = '<i class="fas fa-times"></i>';
            menuBtn.style.transform = 'scale(1.1) rotate(90deg)';
        } else {
            menuBtn.innerHTML = '<i class="fas fa-bars"></i>';
            menuBtn.style.transform = 'scale(1.1) rotate(0)';
        }
        
        setTimeout(() => {
            menuBtn.style.transform = dropdownMenu.classList.contains('active') 
                ? 'scale(1) rotate(90deg)' 
                : 'scale(1) rotate(0)';
        }, 200);
    });

    document.addEventListener('click', (event) => {
        if (!menuBtn.contains(event.target) && !dropdownMenu.contains(event.target)) {
            dropdownMenu.classList.remove('active');
            menuBtn.innerHTML = '<i class="fas fa-bars"></i>';
            menuBtn.style.transform = 'scale(1) rotate(0)';
        }
    });

    walletBtn.addEventListener('click', () => {
        walletBtn.style.animation = 'bounce 0.5s ease';
        setTimeout(() => {
            walletBtn.style.animation = '';
        }, 500);
    });

    redOption.addEventListener('click', () => {
        if (!isBettingOpen || hasPlacedBet) return;
        resetColorSelection();
        redOption.classList.add('selected');
        selectedColor = 'red';
    });

    greenOption.addEventListener('click', () => {
        if (!isBettingOpen || hasPlacedBet) return;
        resetColorSelection();
        greenOption.classList.add('selected');
        selectedColor = 'green';
    });

    violetOption.addEventListener('click', () => {
        if (!isBettingOpen || hasPlacedBet) return;
        resetColorSelection();
        violetOption.classList.add('selected');
        selectedColor = 'violet';
    });

    quickBetBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const amount = parseFloat(this.getAttribute('data-amount'));
            const current = parseFloat(betAmount.value) || 0;
            betAmount.value = current + amount;
        });
    });

    placeBetBtn.addEventListener('click', () => {
        const amount = parseFloat(betAmount.value);
        
        if (!amount || amount <= 0) {
            showToast('Please enter a valid bet amount', 'error');
            return;
        }
        
        if (amount > walletBalance) {
            showToast('Insufficient balance', 'error');
            return;
        }
        
        if (!selectedColor) {
            showToast('Please select a color', 'error');
            return;
        }
        
        if (hasPlacedBet) {
            showToast('You can only place one bet per round', 'error');
            return;
        }
        
        currentBet = amount;
        walletBalance -= amount;
        updateWalletDisplay();
        showToast(`Bet placed: â‚¹${amount.toFixed(2)} on ${selectedColor}`, 'success');
        hasPlacedBet = true;
        
        sendBetToServer(amount, selectedColor);
        
        placeBetBtn.disabled = true;
        placeBetBtn.style.opacity = '0.7';
        placeBetBtn.style.cursor = 'not-allowed';
    });

    clearBetBtn.addEventListener('click', () => {
        if (!hasPlacedBet) {
            resetColorSelection();
            betAmount.value = '';
            selectedColor = null;
            currentBet = 0;
        } else {
            showToast('Cannot clear bet after placing for this round', 'error');
        }
    });

    resultClose.addEventListener('click', () => {
        resultPopup.classList.remove('show');
    });
});
</script>
</body>
</html>



//////////////////////////////////////////////////////////////////////////////////////

<?php
require 'conn.php';

session_start();

// Check if this is an AJAX request
if(isset($_GET['ajax'])) {
    header('Content-Type: application/json');
    
    if ($_GET['ajax'] == 'getTimer') {
        try {
            // Get current timer value for all users
            $sql = "SELECT timmer FROM usersdata LIMIT 1";
            $result = mysqli_query($conn, $sql);
            
            if (!$result) {
                throw new Exception("Database error: " . mysqli_error($conn));
            }
            
            $row = mysqli_fetch_assoc($result);
            
            echo json_encode([
                'success' => true,
                'timer' => $row['timmer'] ?? 30,
                'serverTime' => time() // Current server timestamp
            ]);
        } catch (Exception $e) {
            echo json_encode([
                'success' => false,
                'error' => $e->getMessage()
            ]);
        }
        exit();
    }
    
    if (isset($_SESSION['login']) && $_SESSION['login'] == true) {
        $number = $_SESSION['number'];
        $password = $_SESSION['password'];

        if ($_GET['ajax'] == 'getUserData') {
            try {
                $sqlfetch = "SELECT balance FROM usersdata WHERE number=? AND password=?";
                $stmt = mysqli_prepare($conn, $sqlfetch);
                mysqli_stmt_bind_param($stmt, "ss", $number, $password);
                mysqli_stmt_execute($stmt);
                $result = mysqli_stmt_get_result($stmt);

                if (mysqli_num_rows($result) > 0) {
                    $row = mysqli_fetch_assoc($result);
                    echo json_encode([
                        'success' => true,
                        'balance' => $row['balance']
                    ]);
                } else {
                    throw new Exception('Invalid credentials');
                }
            } catch (Exception $e) {
                echo json_encode([
                    'success' => false,
                    'error' => $e->getMessage()
                ]);
            }
            exit();
        }
    } else {
        echo json_encode([
            'success' => false,
            'error' => 'Session expired'
        ]);
        exit();
    }
}

// Handle POST requests
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    header('Content-Type: application/json');
    
    if (!isset($_SESSION['login'])) {
        echo json_encode([
            'success' => false,
            'error' => 'Session expired'
        ]);
        exit();
    }

    $number = $_SESSION['number'];
    $password = $_SESSION['password'];
    $action = $_POST['action'] ?? '';

    try {
        // Verify user credentials first
        $sql = "SELECT balance FROM usersdata WHERE number=? AND password=?";
        $stmt = mysqli_prepare($conn, $sql);
        mysqli_stmt_bind_param($stmt, "ss", $number, $password);
        mysqli_stmt_execute($stmt);
        $result = mysqli_stmt_get_result($stmt);
        
        if (mysqli_num_rows($result) == 0) {
            throw new Exception('Invalid credentials');
        }

        $user = mysqli_fetch_assoc($result);
        $balance = floatval($user['balance']);

        if ($action == 'placeBet') {
            $betAmount = floatval($_POST['betAmount'] ?? 0);
            $color = $_POST['color'] ?? '';
            
            if ($betAmount <= 0 || $betAmount > $balance) {
                throw new Exception('Invalid bet amount');
            }
            
            if (!in_array($color, ['red', 'green', 'violet'])) {
                throw new Exception('Invalid color selection');
            }
            
            $newBalance = $balance - $betAmount;
            $updateSql = "UPDATE usersdata SET balance = ? WHERE number=? AND password=?";
            $stmt = mysqli_prepare($conn, $updateSql);
            mysqli_stmt_bind_param($stmt, "dss", $newBalance, $number, $password);
            
            if (mysqli_stmt_execute($stmt)) {
                echo json_encode([
                    'success' => true,
                    'newBalance' => $newBalance
                ]);
            } else {
                throw new Exception('Database error');
            }
        } 
        elseif ($action == 'processWin') {
            $winAmount = floatval($_POST['winAmount'] ?? 0);
            
            if ($winAmount <= 0) {
                throw new Exception('Invalid win amount');
            }
            
            $newBalance = $balance + $winAmount;
            $updateSql = "UPDATE usersdata SET balance = ? WHERE number=? AND password=?";
            $stmt = mysqli_prepare($conn, $updateSql);
            mysqli_stmt_bind_param($stmt, "dss", $newBalance, $number, $password);
            
            if (mysqli_stmt_execute($stmt)) {
                echo json_encode([
                    'success' => true,
                    'newBalance' => $newBalance
                ]);
            } else {
                throw new Exception('Database error');
            }
        }
        elseif ($action == 'updateTimer') {
            $newTime = intval($_POST['newTime'] ?? 30);
            
            if ($newTime <= 0) {
                throw new Exception('Invalid timer value');
            }
            
            $updateSql = "UPDATE usersdata SET timmer = ?";
            $stmt = mysqli_prepare($conn, $updateSql);
            mysqli_stmt_bind_param($stmt, "i", $newTime);
            
            if (mysqli_stmt_execute($stmt)) {
                echo json_encode([
                    'success' => true
                ]);
            } else {
                throw new Exception('Database error');
            }
        }
        elseif ($action == 'resetTimer') {
            $roundTime = 30; // Default round time
            $updateSql = "UPDATE usersdata SET timmer = ?";
            $stmt = mysqli_prepare($conn, $updateSql);
            mysqli_stmt_bind_param($stmt, "i", $roundTime);
            
            if (mysqli_stmt_execute($stmt)) {
                echo json_encode([
                    'success' => true
                ]);
            } else {
                throw new Exception('Database error');
            }
        }
        else {
            throw new Exception('Invalid action');
        }
    } catch (Exception $e) {
        echo json_encode([
            'success' => false,
            'error' => $e->getMessage()
        ]);
    }
    exit();
}

// Normal page request continues
if (!isset($_SESSION['login']) || $_SESSION['login'] != true) {
    session_destroy();
    header("location: index.php");
    exit();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ColorWin | Color Prediction Game</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <link rel="stylesheet" href="css/main.css">
</head>
<body>
    <div class="bg-bubble bubble1"></div>
    <div class="bg-bubble bubble2"></div>
    <div class="bg-bubble bubble3"></div>

    <nav class="navbar">
        <button class="menu-btn" id="menuBtn">
            <i class="fas fa-bars"></i>
        </button>

        <a href="#" class="logo">
            <span class="logo-icon">ðŸŽ¨</span>
            <span>ColorWin</span>
        </a>

        <div class="wallet-container" id="walletBtn">
            <i class="fas fa-wallet"></i>
            <span id="walletAmount">â‚¹10</span>
        </div>
    </nav>

    <div class="dropdown-menu" id="dropdownMenu">
        <a href="#" class="menu-item">
            <i class="fas fa-user"></i>
            <span>Profile</span>
        </a>
        <a href="wallet.php" class="menu-item">
            <i class="fas fa-wallet"></i>
            <span>Wallet</span>
        </a>
        <a href="#" class="menu-item">
            <i class="fas fa-history"></i>
            <span>History</span>
        </a>
        <a href="#" class="menu-item">
            <i class="fas fa-trophy"></i>
            <span>Leaderboard</span>
        </a>
        <a href="#" class="menu-item">
            <i class="fas fa-headset"></i>
            <span>Support</span>
        </a>
        <a href="index.php" class="menu-item logout-item">
            <i class="fas fa-sign-out-alt"></i>
            <span>Logout</span>
        </a>
    </div>

    <div class="result-popup" id="resultPopup">
        <div class="result-icon">
            <i class="fas fa-trophy" id="resultIcon"></i>
        </div>
        <h2 class="result-title" id="resultTitle">You Won!</h2>
        <div class="result-amount" id="resultAmount">+â‚¹500.00</div>
        <div class="result-details" id="resultDetails">
            You bet â‚¹500 on <span class="win-amount">Red</span> and won â‚¹1000!
        </div>
        <button class="result-close" id="resultClose">Continue</button>
    </div>

    <div class="container">
        <div class="header">
            <h1>Color Prediction Game</h1>
            <p class="subtitle">Predict the winning color and win up to 2.4x your bet amount!</p>
        </div>

        <div class="game-section">
            <h2 class="section-title">
                <i class="fas fa-gamepad"></i> Place Your Bet
            </h2>
            
            <div class="timer-section">
                <div class="timer-display" id="timerDisplay">00:30</div>
                <div class="timer-bar">
                    <div class="timer-progress" id="timerProgress"></div>
                </div>
                <div class="round-info">Next Round In</div>
            </div>
            
            <div class="color-options">
                <div class="color-option red" id="redOption" data-color="red">
                    <div class="color-icon">
                        <i class="fas fa-square"></i>
                    </div>
                    <div class="color-name">Red</div>
                    <div class="color-multiplier">2.4x Payout</div>
                </div>
                
                <div class="color-option green" id="greenOption" data-color="green">
                    <div class="color-icon">
                        <i class="fas fa-square"></i>
                    </div>
                    <div class="color-name">Green</div>
                    <div class="color-multiplier">2.4x Payout</div>
                </div>
                
                <div class="color-option violet" id="violetOption" data-color="violet">
                    <div class="color-icon">
                        <i class="fas fa-square"></i>
                    </div>
                    <div class="color-name">Violet</div>
                    <div class="color-multiplier">2.4x Payout</div>
                </div>
            </div>
            
            <div class="bet-section">
                <div class="bet-controls">
                    <input type="number" class="bet-amount" id="betAmount" placeholder="Enter bet amount" value="10">
                </div>
                
                <div class="quick-bet">
                    <button class="quick-bet-btn" data-amount="10">+10</button>
                    <button class="quick-bet-btn" data-amount="50">+50</button>
                    <button class="quick-bet-btn" data-amount="100">+100</button>
                    <button class="quick-bet-btn" data-amount="500">+500</button>
                </div>
            </div>
            
            <div class="action-buttons">
                <button class="bet-btn place-bet" id="placeBetBtn">
                    <i class="fas fa-coins"></i> Place Bet
                </button>
                <button class="bet-btn clear-bet" id="clearBetBtn">
                    <i class="fas fa-trash"></i> Clear
                </button>
            </div>
        </div>
        
        <div class="history-section">
            <div class="history-title">
                <h2 class="section-title">
                    <i class="fas fa-history"></i> Game History
                </h2>
                <div class="round-info">Last 5 rounds</div>
            </div>
            
            <div class="history-items" id="historyItems">
                <!-- History items will be added here dynamically -->
            </div>
            
            <div class="detailed-history">
                <h3 class="section-title">
                    <i class="fas fa-list"></i> Your Last 5 Bets
                </h3>
                
                <div id="historyTableContainer">
                    <table class="history-table" id="historyTable">
                        <thead>
                            <tr>
                                <th>Round</th>
                                <th>Your Color</th>
                                <th>Amount</th>
                                <th>Result</th>
                                <th>Payout</th>
                            </tr>
                        </thead>
                        <tbody id="historyTableBody">
                            <!-- History rows will be added here dynamically -->
                        </tbody>
                    </table>
                    <div class="no-history" id="noHistoryMessage" style="display: none;">
                        No bets history yet. Place your first bet to see your results here!
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="toast" id="toast">
        <i class="fas fa-check-circle"></i>
        <span id="toastMessage">Bet placed successfully!</span>
    </div>

    <script>
document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const menuBtn = document.getElementById('menuBtn');
    const dropdownMenu = document.getElementById('dropdownMenu');
    const walletBtn = document.getElementById('walletBtn');
    const walletAmount = document.getElementById('walletAmount');
    const timerDisplay = document.getElementById('timerDisplay');
    const timerProgress = document.getElementById('timerProgress');
    const redOption = document.getElementById('redOption');
    const greenOption = document.getElementById('greenOption');
    const violetOption = document.getElementById('violetOption');
    const betAmount = document.getElementById('betAmount');
    const placeBetBtn = document.getElementById('placeBetBtn');
    const clearBetBtn = document.getElementById('clearBetBtn');
    const historyItems = document.getElementById('historyItems');
    const historyTableBody = document.getElementById('historyTableBody');
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toastMessage');
    const quickBetBtns = document.querySelectorAll('.quick-bet-btn');
    const resultPopup = document.getElementById('resultPopup');
    const resultIcon = document.getElementById('resultIcon');
    const resultTitle = document.getElementById('resultTitle');
    const resultAmount = document.getElementById('resultAmount');
    const resultDetails = document.getElementById('resultDetails');
    const resultClose = document.getElementById('resultClose');
    const noHistoryMessage = document.getElementById('noHistoryMessage');

    // Game state
    let walletBalance = 0;
    let selectedColor = null;
    let currentBet = 0;
    const roundTime = 30; // Fixed round duration in seconds
    let timeLeft = roundTime;
    let isBettingOpen = true;
    let gameInterval;
    let history = [];
    let betHistory = [];
    let hasPlacedBet = false;
    let serverTimeOffset = 0; // Difference between server and client time
    let lastTimerValue = 0;

    // Initialize game
    initGame();

    function initGame() {
        // First sync with server time and get initial timer value
        syncServerTime().then(() => {
            // Then load user data
            fetchUserData();
            
            // Start the game timer loop
            startGameTimer();
            
            // Initialize displays
            updateHistoryDisplay();
            updateBetHistoryDisplay();
        });
    }

    // Synchronize with server time and get initial timer value
    function syncServerTime() {
        return fetch('main.php?ajax=getTimer')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success && data.timer !== undefined) {
                    // Calculate server-client time offset
                    const clientTime = Math.floor(Date.now() / 1000);
                    serverTimeOffset = data.serverTime - clientTime;
                    
                    // Set initial timer value
                    const serverTime = getServerTime();
                    timeLeft = roundTime - (serverTime % roundTime);
                    lastTimerValue = timeLeft;
                    
                    console.log("Timer synced with server. Initial time left:", timeLeft);
                } else if (data.error) {
                    console.error("Error:", data.error);
                    if (data.error === 'Session expired') {
                        window.location.href = 'index.php';
                    }
                }
            })
            .catch(error => {
                console.error("Failed to sync with server:", error);
            });
    }

    // Get current server time
    function getServerTime() {
        return Math.floor(Date.now() / 1000) + serverTimeOffset;
    }

    // Fetch user data (balance)
    function fetchUserData() {
        fetch('main.php?ajax=getUserData')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success && data.balance !== undefined) {
                    walletBalance = parseFloat(data.balance);
                    updateWalletDisplay();
                } else if (data.error) {
                    console.error("Error:", data.error);
                    if (data.error === 'Session expired') {
                        window.location.href = 'index.php';
                    }
                }
            })
            .catch(error => {
                console.error("Failed to fetch user data:", error);
            });
    }

    // Start the game timer
    function startGameTimer() {
        clearInterval(gameInterval);
        
        gameInterval = setInterval(() => {
            const serverTime = getServerTime();
            timeLeft = roundTime - (serverTime % roundTime);
            
            // Detect when round changes (when timer wraps around)
            if (lastTimerValue > 1 && timeLeft === roundTime) {
                endRound();
            }
            
            lastTimerValue = timeLeft;
            updateTimerDisplay();
            
            // Update betting availability
            if (timeLeft <= 3) {
                isBettingOpen = false;
                placeBetBtn.disabled = true;
            } else {
                isBettingOpen = true;
                placeBetBtn.disabled = false;
            }
        }, 200); // Update frequently for smooth display
    }

    // Update timer display
    function updateTimerDisplay() {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        const progressPercent = (timeLeft / roundTime) * 100;
        timerProgress.style.width = `${progressPercent}%`;
        
        if (timeLeft <= 5) {
            timerDisplay.style.color = '#ff4757';
            timerProgress.style.background = '#ff4757';
            
            if (timeLeft <= 3) {
                timerDisplay.style.animation = 'shake 0.5s infinite';
            }
        } else {
            timerDisplay.style.color = '#FFD700';
            timerProgress.style.background = 'linear-gradient(90deg, #6c5ce7, #a29bfe)';
            timerDisplay.style.animation = '';
        }
    }

    // End the current round and start new one
    function endRound() {
        hasPlacedBet = false;
        const colors = ['red', 'green', 'violet'];
        const winningColor = colors[Math.floor(Math.random() * colors.length)];
        
        // Update history
        history.unshift(winningColor);
        if (history.length > 5) history.pop();
        updateHistoryDisplay();
        
        // Process results if bet was placed
        if (selectedColor) {
            if (selectedColor === winningColor) {
                const winAmount = currentBet * 2.4;
                walletBalance += winAmount;
                updateWalletDisplay();
                
                betHistory.unshift({
                    color: selectedColor,
                    amount: currentBet,
                    result: 'win',
                    payout: winAmount
                });
                
                showResultPopup(true, winAmount, selectedColor, currentBet);
                createConfetti();
                sendWinToServer(winAmount);
            } else {
                betHistory.unshift({
                    color: selectedColor,
                    amount: currentBet,
                    result: 'lose',
                    payout: 0
                });
                
                showResultPopup(false, 0, selectedColor, currentBet);
            }
            
            updateBetHistoryDisplay();
        }
        
        // Reset for new round
        selectedColor = null;
        currentBet = 0;
        resetColorSelection();
        
        // Reset UI
        placeBetBtn.disabled = false;
        placeBetBtn.style.opacity = '1';
        placeBetBtn.style.cursor = 'pointer';
        betAmount.value = '';
    }

    // Update wallet display
    function updateWalletDisplay() {
        walletAmount.textContent = `â‚¹${walletBalance.toFixed(2)}`;
    }

    // Update history display
    function updateHistoryDisplay() {
        historyItems.innerHTML = '';
        
        if (history.length === 0) {
            historyItems.textContent = 'No history yet';
            historyItems.classList.add('empty');
            return;
        }
        
        historyItems.classList.remove('empty');
        
        history.slice(0, 5).forEach(color => {
            const historyItem = document.createElement('div');
            historyItem.className = `history-item ${color}`;
            historyItem.textContent = color.charAt(0).toUpperCase();
            historyItems.appendChild(historyItem);
        });
    }

    // Update bet history display
    function updateBetHistoryDisplay() {
        historyTableBody.innerHTML = '';
        
        if (betHistory.length === 0) {
            document.getElementById('historyTable').style.display = 'none';
            noHistoryMessage.style.display = 'block';
            return;
        }
        
        document.getElementById('historyTable').style.display = 'table';
        noHistoryMessage.style.display = 'none';
        
        betHistory.slice(0, 5).forEach((bet, index) => {
            const row = document.createElement('tr');
            
            const roundCell = document.createElement('td');
            roundCell.textContent = index + 1;
            row.appendChild(roundCell);
            
            const colorCell = document.createElement('td');
            colorCell.textContent = bet.color.charAt(0).toUpperCase() + bet.color.slice(1);
            colorCell.style.color = bet.color === 'red' ? '#ff4757' : 
                                    bet.color === 'green' ? '#00b894' : '#6c5ce7';
            row.appendChild(colorCell);
            
            const amountCell = document.createElement('td');
            amountCell.textContent = `â‚¹${bet.amount.toFixed(2)}`;
            row.appendChild(amountCell);
            
            const resultCell = document.createElement('td');
            const resultSpan = document.createElement('span');
            resultSpan.textContent = bet.result === 'win' ? 'Win' : 'Lose';
            resultSpan.className = bet.result === 'win' ? 'win-amount' : 'loss-amount';
            resultCell.appendChild(resultSpan);
            row.appendChild(resultCell);
            
            const payoutCell = document.createElement('td');
            if (bet.result === 'win') {
                payoutCell.innerHTML = `<span class="win-amount">+â‚¹${bet.payout.toFixed(2)}</span>`;
            } else {
                payoutCell.innerHTML = `<span class="loss-amount">-â‚¹${bet.amount.toFixed(2)}</span>`;
            }
            row.appendChild(payoutCell);
            
            historyTableBody.appendChild(row);
        });
    }

    // Reset color selection
    function resetColorSelection() {
        redOption.classList.remove('selected');
        greenOption.classList.remove('selected');
        violetOption.classList.remove('selected');
    }

    // Show toast notification
    function showToast(message, type = 'success') {
        toastMessage.textContent = message;
        toast.className = 'toast';
        toast.classList.add(type === 'error' ? 'error' : 'success');
        toast.classList.add('show');
        
        setTimeout(() => {
            toast.classList.remove('show');
        }, 3000);
    }

    // Create confetti effect
    function createConfetti() {
        const colors = ['#ff4757', '#00b894', '#6c5ce7', '#FFD700', '#fd79a8', '#00cec9'];
        
        for (let i = 0; i < 100; i++) {
            const confetti = document.createElement('div');
            confetti.className = 'confetti';
            confetti.style.left = `${Math.random() * 100}vw`;
            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.width = `${Math.random() * 10 + 5}px`;
            confetti.style.height = `${Math.random() * 10 + 5}px`;
            confetti.style.animationDelay = `${Math.random() * 2}s`;
            confetti.style.opacity = Math.random() + 0.5;
            
            document.body.appendChild(confetti);
            
            setTimeout(() => {
                confetti.remove();
            }, 3000);
        }
    }

    // Show result popup
    function showResultPopup(isWin, amount, color, betAmount) {
        resultPopup.className = 'result-popup';
        resultPopup.classList.add(isWin ? 'win' : 'lose');
        
        if (isWin) {
            resultIcon.className = 'fas fa-trophy';
            resultTitle.textContent = 'You Won!';
            resultAmount.textContent = `+â‚¹${amount.toFixed(2)}`;
            resultDetails.innerHTML = `You bet â‚¹${betAmount.toFixed(2)} on <span class="win-amount">${color.charAt(0).toUpperCase() + color.slice(1)}</span> and won â‚¹${amount.toFixed(2)}!`;
        } else {
            resultIcon.className = 'fas fa-times-circle';
            resultTitle.textContent = 'You Lost';
            resultAmount.textContent = `-â‚¹${betAmount.toFixed(2)}`;
            resultDetails.innerHTML = `You bet â‚¹${betAmount.toFixed(2)} on <span class="loss-amount">${color.charAt(0).toUpperCase() + color.slice(1)}</span> and lost.`;
        }
        
        resultPopup.classList.add('show');
    }

    // Send win to server
    function sendWinToServer(amount) {
        const formData = new FormData();
        formData.append('winAmount', amount);
        formData.append('action', 'processWin');
        
        fetch('main.php', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if(data.success && data.newBalance !== undefined) {
                walletBalance = parseFloat(data.newBalance);
                updateWalletDisplay();
            } else if(data.error === 'Session expired') {
                window.location.href = 'index.php';
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }

    // Send bet to server
    function sendBetToServer(amount, color) {
        const formData = new FormData();
        formData.append('betAmount', amount);
        formData.append('color', color);
        formData.append('action', 'placeBet');
        
        fetch('main.php', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if(data.success) {
                if(data.newBalance !== undefined) {
                    walletBalance = parseFloat(data.newBalance);
                    updateWalletDisplay();
                }
            } else {
                walletBalance += amount;
                updateWalletDisplay();
                showToast(data.error || "Bet failed", 'error');
                hasPlacedBet = false;
                placeBetBtn.disabled = false;
                placeBetBtn.style.opacity = '1';
                placeBetBtn.style.cursor = 'pointer';
                
                if(data.error === 'Session expired') {
                    window.location.href = 'index.php';
                }
            }
        })
        .catch(error => {
            console.error('Error:', error);
            walletBalance += amount;
            updateWalletDisplay();
            showToast("Network error", 'error');
            hasPlacedBet = false;
            placeBetBtn.disabled = false;
            placeBetBtn.style.opacity = '1';
            placeBetBtn.style.cursor = 'pointer';
        });
    }

    // Event Listeners
    menuBtn.addEventListener('click', (event) => {
        event.stopPropagation();
        dropdownMenu.classList.toggle('active');
        
        if (dropdownMenu.classList.contains('active')) {
            menuBtn.innerHTML = '<i class="fas fa-times"></i>';
            menuBtn.style.transform = 'scale(1.1) rotate(90deg)';
        } else {
            menuBtn.innerHTML = '<i class="fas fa-bars"></i>';
            menuBtn.style.transform = 'scale(1.1) rotate(0)';
        }
        
        setTimeout(() => {
            menuBtn.style.transform = dropdownMenu.classList.contains('active') 
                ? 'scale(1) rotate(90deg)' 
                : 'scale(1) rotate(0)';
        }, 200);
    });

    document.addEventListener('click', (event) => {
        if (!menuBtn.contains(event.target) && !dropdownMenu.contains(event.target)) {
            dropdownMenu.classList.remove('active');
            menuBtn.innerHTML = '<i class="fas fa-bars"></i>';
            menuBtn.style.transform = 'scale(1) rotate(0)';
        }
    });

    walletBtn.addEventListener('click', () => {
        walletBtn.style.animation = 'bounce 0.5s ease';
        setTimeout(() => {
            walletBtn.style.animation = '';
        }, 500);
    });

    redOption.addEventListener('click', () => {
        if (!isBettingOpen || hasPlacedBet) return;
        resetColorSelection();
        redOption.classList.add('selected');
        selectedColor = 'red';
    });

    greenOption.addEventListener('click', () => {
        if (!isBettingOpen || hasPlacedBet) return;
        resetColorSelection();
        greenOption.classList.add('selected');
        selectedColor = 'green';
    });

    violetOption.addEventListener('click', () => {
        if (!isBettingOpen || hasPlacedBet) return;
        resetColorSelection();
        violetOption.classList.add('selected');
        selectedColor = 'violet';
    });

    quickBetBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const amount = parseFloat(this.getAttribute('data-amount'));
            const current = parseFloat(betAmount.value) || 0;
            betAmount.value = current + amount;
        });
    });

    placeBetBtn.addEventListener('click', () => {
        const amount = parseFloat(betAmount.value);
        
        if (!amount || amount <= 0) {
            showToast('Please enter a valid bet amount', 'error');
            return;
        }
        
        if (amount > walletBalance) {
            showToast('Insufficient balance', 'error');
            return;
        }
        
        if (!selectedColor) {
            showToast('Please select a color', 'error');
            return;
        }
        
        if (hasPlacedBet) {
            showToast('You can only place one bet per round', 'error');
            return;
        }
        
        currentBet = amount;
        walletBalance -= amount;
        updateWalletDisplay();
        showToast(`Bet placed: â‚¹${amount.toFixed(2)} on ${selectedColor}`, 'success');
        hasPlacedBet = true;
        
        sendBetToServer(amount, selectedColor);
        
        placeBetBtn.disabled = true;
        placeBetBtn.style.opacity = '0.7';
        placeBetBtn.style.cursor = 'not-allowed';
    });

    clearBetBtn.addEventListener('click', () => {
        if (!hasPlacedBet) {
            resetColorSelection();
            betAmount.value = '';
            selectedColor = null;
            currentBet = 0;
        } else {
            showToast('Cannot clear bet after placing for this round', 'error');
        }
    });

    resultClose.addEventListener('click', () => {
        resultPopup.classList.remove('show');
    });
});
</script>
</body>
</html>